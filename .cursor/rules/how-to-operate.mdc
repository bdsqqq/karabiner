---
description: 
globs: *
---
# Karabiner Configuration Rules

## Overview
This document outlines the rules for implementing Karabiner key mappings in this codebase. These rules ensure consistency and type safety while maintaining functionality.

## Rules

### 1. Research First
Before implementing any new mapping:
- Search for similar implementations in the codebase
- Pay special attention to [max's_rules.ts](mdc:max's_rules.ts) which serves as a reference
- Understand the patterns used in existing solutions

### 2. Use Type-Safe Properties
Only use properties defined in [types.ts](mdc:types.ts) interfaces:
- `to`: For immediate actions when key is pressed
- `to_after_key_up`: For cleanup actions when key is released
- `to_if_alone`: For actions when key is tapped
- `conditions`: For contextual behavior

### 3. Layer/Mode Toggle Pattern
When implementing layer or mode toggles:
```typescript
{
  type: "basic",
  from: { key_code: "some_key" },
  to: [
    { set_variable: { name: "my_layer", value: 1 } },
    { set_variable: { name: "my_layer_hold", value: 1 } }
  ],
  to_after_key_up: [
    { set_variable: { name: "my_layer", value: 0 } },
    { set_variable: { name: "my_layer_hold", value: 0 } }
  ],
  to_if_alone: [
    { set_variable: { name: "my_layer", value: "toggle" } }
  ]
}
```

### 4. No Type Assertions
Never use type assertions (e.g., `as any`). Instead:
- Look for examples in the codebase
- Refactor to use supported properties
- If a property seems essential but isn't in types, consider updating `types.ts`

### 5. Maintain Fork Separation
- Only modify [rules.ts](mdc:rules.ts)
- Keep other files (like [types.ts](mdc:types.ts)) unchanged
- Use patterns from the codebase to solve type issues

## Examples

### Layer Toggle Implementation
```typescript
{
  description: "Layer Toggle Example",
  manipulators: [
    {
      type: "basic",
      from: {
        key_code: "caps_lock",
        modifiers: { optional: ["any"] }
      },
      to: [
        { set_variable: { name: "layer", value: 1 } },
        { set_variable: { name: "layer_hold", value: 1 } }
      ],
      to_after_key_up: [
        { set_variable: { name: "layer", value: 0 } },
        { set_variable: { name: "layer_hold", value: 0 } }
      ],
      to_if_alone: [
        { set_variable: { name: "layer", value: "toggle" } }
      ]
    }
  ]
}
```